
{% assign block_version_number = '1.34.0' %}

{%-
    # inline styles before rendering HTML

    # note: .category-breadcrumbs class only added to TAE, not used for legacy embeds
-%}
<style id="uncomplicated-breadcrumbs-styles">
    /* limit content shift as forces repaint */
    .category-breadcrumbs { width: 100%; }
    /* force breadcrumbs to display as a trail (a > b > c inline) */
    .category-breadcrumbs { display: block; }
    .category-breadcrumbs a, .category-breadcrumbs span { display: inline; }
    /* optionally widen spacing */
    .category-breadcrumbs .breadcrumb__sep.breadcrumb__sep_plus3 {
        margin-left: 0.3em;
        margin-right: 0.3em;
    }
    .category-breadcrumbs .breadcrumb__sep.breadcrumb__sep_plus5 {
        margin-left: 0.5em;
        margin-right: 0.5em;
    }
    .category-breadcrumbs .breadcrumb__sep.breadcrumb__sep_plus10 {
        margin-left: 1.0em;
        margin-right: 1.0em;
    }
    .category-breadcrumbs .breadcrumb__sep.breadcrumb__sep_plus15 {
        margin-left: 1.5em;
        margin-right: 1.5em;
    }
    /* allow specific tagged breadcrumbs to be hidden */
    .category-breadcrumbs.hide_first_breadcrumb > a:first-of-type, .category-breadcrumbs.hide_first_breadcrumb > span:first-of-type { display: none; }
</style>

{%- liquid

    # define variable defaults (used if without TAE schema)
    unless show_catroot or show_catroot == false
        assign show_catroot = true
    endunless
    unless additional_nav_classes
        assign additional_nav_classes = ""
    endunless

    # look for metafields if set
    if shop.metafields.uncomptcat.catidslist.value.summary.versionint
        assign meta_version_int = shop.metafields.uncomptcat.catidslist.value.summary.versionint
    else
        # old meta version if not set in metafields
        assign meta_version_int = 1021000
    endif

    # derive version int
    assign block_version_components = block_version_number | split: "."
    assign block_version_int_major = block_version_components[0] | times: 1000000
    assign block_version_int_minor = block_version_components[1] | times: 1000
    assign block_version_int = block_version_int_major | plus: block_version_int_minor | plus: block_version_components[2]

    # breadcrumb rendering done in javascript
    assign render_status = 0

-%}
<!-- Begin uncomplicated category breadcrumbs v{{ block_version_number }} - PLEASE DO NOT CHANGE as this is auto-generated on category refresh -->
<nav id="uncomplicated-breadcrumbs"
     data-render-status="{{ render_status }}" data-block-version-int="{{ block_version_int }}" data-meta-version-int="{{ meta_version_int }}"
     class="breadcrumb {{ additional_nav_classes }} {% unless show_catroot %}hide_first_breadcrumb{% endunless %}"
     role="navigation" aria-label="breadcrumbs"
>

{%- liquid

    # define variable defaults (used if without TAE schema)
    unless link_catroot
        assign link_catroot = "/"
    endunless
    unless text_catroot
        assign text_catroot = "Home"
    endunless

    # create slash-terminated root including locale/county code
    if request.locale.root_url == "/"
        assign country_prepend = ""
    else
        assign country_prepend = request.locale.root_url
    endif

-%}
<a id="uncomplicated-category-breadcrumb-model-item" href="{{ country_prepend }}{{ link_catroot }}" title="{{ text_catroot }}">{{ text_catroot }}</a>

{%- liquid

    # define variable defaults (used if without TAE schema)
    unless prod_multicat_sel
        assign prod_multicat_sel = "first"
    endunless
    unless sep_plus_class
        assign sep_plus_class = "breadcrumb__sep_plus5"
    endunless
    unless separator_char_code
        assign separator_char_code = "rsaquo;"
    endunless
    unless show_finalbread_as_textonly
        assign show_finalbread_as_textonly = false
    endunless
    unless text_catall
        assign text_catall = "All Products"
    endunless
    unless link_catall
        assign link_catall = "/collections/all"
    endunless

    # try to find collection hint
    if collection
        assign hinted_collection = collection
        assign hinted_method = "collection_page_liquid"
        # extension: on product pages, use metafield then prod_multicat_sel
    elsif product.collections[0]
        if product.metafields.custom.default_collection_reference
            for loop_collection in product.collections
                # match on collection object, could also match on any unique attribute like x.id
                if loop_collection == product.metafields.custom.default_collection_reference.value
                    assign hinted_collection = loop_collection
                    assign hinted_method = "product_metafield_reference"
                endif
            endfor
        elsif product.metafields.custom.default_collection_handle
            for loop_collection in product.collections
                if loop_collection.handle == product.metafields.custom.default_collection_handle
                    assign hinted_collection = loop_collection
                    assign hinted_method = "product_metafield"
                endif
            endfor
        elsif product.metafields.my_fields.default_collection_handle
            for loop_collection in product.collections
                if loop_collection.handle == product.metafields.my_fields.default_collection_handle
                    assign hinted_collection = loop_collection
                    assign hinted_method = "product_metafield"
                endif
            endfor
        elsif prod_multicat_sel == "generic"
            assign hinted_collection = false
            assign hinted_method = "product_multicat_generic"
        endif
    endif

    # implicit else: try to find in-hierarchy first or in-hierarchy last
    unless hinted_method
        if product.collections[0]
            if prod_multicat_sel == "first"
                # loop through collections that this product belongs to (to find first)
                for loop_collection in product.collections
                    # DUBSTART: see if this collection is in the hierarchy as a parent
                    assign loop_collection_id_string = loop_collection.id | append: ''
                    if shop.metafields.uncomptcat.catidslist.value[loop_collection_id_string]
                        assign hinted_collection = loop_collection
                        assign hinted_method = "product_multicat_inhier_aspar_first"
                        break
                    else
                        assign loop_collection_id_comma = loop_collection.id | prepend: ',' | append: ','
                        # see if this collection is in the hierarchy as a child (of the candidate parent)
                        assign parent_array = shop.metafields.uncomptcat.catidslist.value.summary.enumerated_elements | split: ','
                        for loop_parent_category_id_string in parent_array
                            assign loop_parent_category = shop.metafields.uncomptcat.catidslist.value[loop_parent_category_id_string]
                            assign inhier_ids_string = loop_parent_category.children | join: ',' | prepend: ',' | append: ','
                            if loop_parent_category.children[0]
                                if inhier_ids_string contains loop_collection_id_comma
                                    assign hinted_collection = loop_collection
                                    assign hinted_method = "product_multicat_inhier_aschild_first"
                                    assign parent_category = loop_parent_category
                                    break
                                endif
                            endif
                        endfor
                        # double break if found
                        if hinted_method
                            break
                        endif
                    endif # DUBEND
                endfor
            elsif prod_multicat_sel == "last"
                # loop backwards through collections that this product belongs to (to find last)
                for loop_collection in product.collections reversed
                    # DUBSTART: see if this collection is in the hierarchy as a parent
                    assign loop_collection_id_string = loop_collection.id | append: ''
                    if shop.metafields.uncomptcat.catidslist.value[loop_collection_id_string]
                        assign hinted_collection = loop_collection
                        assign hinted_method = "product_multicat_inhier_aspar_last"
                        break
                    else
                        assign loop_collection_id_comma = loop_collection.id | prepend: ',' | append: ','
                        # see if this collection is in the hierarchy as a child (of the candidate parent)
                        assign parent_array = shop.metafields.uncomptcat.catidslist.value.summary.enumerated_elements | split: ','
                        for loop_parent_category_id_string in parent_array
                            assign loop_parent_category = shop.metafields.uncomptcat.catidslist.value[loop_parent_category_id_string]
                            assign inhier_ids_string = loop_parent_category.children | join: ',' | prepend: ',' | append: ','
                            if loop_parent_category.children[0]
                                if inhier_ids_string contains loop_collection_id_comma
                                    assign hinted_collection = loop_collection
                                    assign hinted_method = "product_multicat_inhier_aschild_last"
                                    # capture parent category here, because cannot derive from non-parent hinted_collection
                                    assign parent_category = loop_parent_category
                                    break
                                endif
                            endif
                        endfor
                        # double break if found
                        if hinted_method
                            break
                        endif
                    endif # DUBEND
                endfor
            endif
        endif
    endunless

    # implicit else: fallback to simple first or last
    unless hinted_method
        if product.collections[0]
            if prod_multicat_sel == "first"
                assign hinted_collection = product.collections.first
                assign hinted_method = "product_multicat_first"
            elsif prod_multicat_sel == "last"
                assign hinted_collection = product.collections.last
                assign hinted_method = "product_multicat_last"
            endif
        endif
    endunless
    # implicit else: fallback to 'none'
    unless hinted_method
        assign hinted_collection = false
        assign hinted_method = "none"
    endunless

    # generate hinted path based on hinted collection
    if hinted_collection
        # use .url which includes locale, instead of .handle which does not and is not URL-encoded
        assign hinted_path = hinted_collection.url
        # discover parents
        unless parent_category
            assign hinted_collection_id_string = hinted_collection.id | append: ''
            if shop.metafields.uncomptcat.catidslist.value[hinted_collection_id_string]
                assign hinted_category = shop.metafields.uncomptcat.catidslist.value[hinted_collection_id_string]
                assign parent_category_id_string = hinted_category.parents.last | append: ''
                if shop.metafields.uncomptcat.catidslist.value[parent_category_id_string]
                    assign parent_category = shop.metafields.uncomptcat.catidslist.value[parent_category_id_string]
                endif
            endif
        endunless
    endif
-%}
{%- if parent_category -%}
    <!-- parent {{ parent_category.url }} ({{ parent_category.id }}), grandparents ({{ parent_category.parents | reverse | join: ' > ' }}) -->
{%- endif -%}
{%- if hinted_collection -%}
    {%- comment -%} on collection pages or product pages with an identifiable collection {%- endcomment -%}
    <span id="uncomplicated-category-breadcrumb-top-separator" aria-hidden="true" class="breadcrumb__sep {{ sep_plus_class }}">{{ "&" | append: separator_char_code }}</span>
    {%- if product == null and show_finalbread_as_textonly -%}
        {%- comment -%} render collection as text-only leaf {%- endcomment -%}
        <span class="breadcrumb__leaf">{{ hinted_collection.title }}</span>
    {%- else -%}
        {%- comment -%} render collection as linked branch {%- endcomment -%}
        <a href="{{ hinted_path }}" class="breadcrumb__branch" id="uncomplicated-category-breadcrumb-final-item" >{{ hinted_collection.title }}</a>
    {%- endif -%}
    <span id="uncomplicated-meta-hintedpath" data-hintedpath="{{ hinted_path }}" data-hintedmethod="{{ hinted_method }}" aria-hidden="true" style="display: none;"></span>
{%- else -%}
    {%- comment -%} product pages with no identifiable collection {%- endcomment -%}
    <span id="uncomplicated-category-breadcrumb-top-separator" aria-hidden="true" class="breadcrumb__sep breadcrumb__allproducts {{ sep_plus_class }}">{{ "&" | append: separator_char_code }}</span>
    <a href="{{ link_catall }}" title="{{ text_catall }}">{{ text_catall }}</a>
{%- endif -%}

{%- liquid

    # define variable defaults (used if without TAE schema)
    unless show_tags or show_tags == false
        assign show_tags = true
    endunless
    unless show_product_title or show_product_title == false
        assign show_product_title = true
    endunless
    unless sep_plus_class
        assign sep_plus_class = "breadcrumb__sep_plus5"
    endunless
    unless separator_char_code
        assign separator_char_code = "rsaquo;"
    endunless
    unless truncate_limit
        assign truncate_limit = 0
    endunless

    # render appends (tags, product title etc.)
-%}
{%- if current_tags and show_tags -%}
    <span aria-hidden="true" class="breadcrumb__sep {{ sep_plus_class }}">{{ "&" | append: separator_char_code }}</span><span>{{ current_tags | join: " + " }}</span>
{%- endif -%}
{%- if product and show_product_title -%}
    <span aria-hidden="true" class="breadcrumb__sep {{ sep_plus_class }}">{{ "&" | append: separator_char_code }}</span><span><strong>{% if truncate_limit > 0 %}{{ product.title | truncate: truncate_limit }}{% else %}{{ product.title }}{% endif %}</strong></span>
{%- endif -%}

{%- liquid

    # define variable defaults (used if without TAE schema)
    unless insert_jsonld or insert_jsonld == false
        assign insert_jsonld = true
    endunless
    unless disable_jsonld
        assign disable_jsonld = false
    endunless
    unless insert_shortlinkfix
        assign insert_shortlinkfix = false
    endunless
    unless prod_ignore_referrer
        assign prod_ignore_referrer = false
    endunless

    # render metadata spans for JS processing
-%}
<span id="{% if insert_jsonld != true or disable_jsonld %}uncomplicated-meta-disablejsonld{% else %}uncomplicated-meta-addjsonld{% endif %}" aria-hidden="true" style="display: none;"></span>
{%- if insert_shortlinkfix -%}<span id="uncomplicated-meta-shortlinkfix" aria-hidden="true" style="display: none;"></span>{%- endif -%}
{%- if prod_ignore_referrer -%}<span id="uncomplicated-meta-ignorereferrer" aria-hidden="true" style="display: none;"></span>{%- endif -%}

</nav>
<!-- End uncomplicated category breadcrumbs -->

{%- liquid

    unless bucket_source
        assign bucket_source = 'https://themeassets.aws-dns.uncomplicatedapps.com/shopify'
    endunless
    if shop.metafields.uncomptcat.cathiter.value
        assign category_hierarchy_iteration = shop.metafields.uncomptcat.cathiter.value
    else
        assign category_hierarchy_iteration = 0
    endif

    # attach scripts (async) and styles from remote assets folder using shop permanent name
    # cachebust on iteration number (if set)
    # disable 'RemoteAsset' theme checks because we cannot use Shopify CDN for dynamic assets
-%}
{% # theme-check-disable RemoteAsset %}
<script src="{{ bucket_source | append: "/" | append: shop.permanent_domain | append: "-catlist.min.js?cbi=" | append: block_version_number | append: category_hierarchy_iteration }}" async></script>
{% # theme-check-enable RemoteAsset %}

